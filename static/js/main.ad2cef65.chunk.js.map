{"version":3,"sources":["services/firebase.ts","style-variables.ts","components/FileShare.tsx","components/TextShare.tsx","components/CloudInstance.tsx","components/Home.tsx","utils/generateId.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","storage","colors","FileShare","instanceId","useState","downloadUrls","setDownloadUrls","storageRef","useMemo","ref","child","useEffect","listAll","then","res","items","forEach","itemRef","getDownloadURL","url","prevDownloads","name","className","heading","fileContainer","sortBy","map","file","index","key","fileRow","fileIcon","download","href","style","marginRight","deleteIcon","onClick","delete","prevFiles","produce","newFiles","remove","catch","htmlFor","fileInputLabel","Form","Control","id","type","onChange","e","fileName","target","files","put","console","log","value","fileInput","css","TextShare","textVals","setTextVals","visibleTextArea","setVisibleTextArea","dbTextRef","setDbTextRef","loadDb","useCallback","once","snapshot","val","set","text","0","1","2","debounceUpdateDb","debounce","nextVals","handleTextChange","inputVal","newVals","btnContainer","cx","tabBtn","tabBtnSelected","textVal","aria-label","textArea","display","CloudInstance","useParams","history","useHistory","headerContainer","Button","goBack","variant","flexContainer","contentContainer","Home","uniqId","setUniqId","btnDisabled","setBtnDisabled","showErrAlert","setShowErrAlert","container","size","createBtn","length","result","characters","charactersLength","i","charAt","Math","floor","random","generateId","push","inputWrapper","placeholder","idInput","maxLength","err","searchBtn","disabled","Alert","errorAlertShow","errorAlertHide","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ad2cef65.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: \"file-cloud-80120\",\n  storageBucket: \"file-cloud-80120.appspot.com\",\n  messagingSenderId: \"1088457646\",\n  appId: \"1:1088457646:web:6a9d57d3f2b6f0a178963f\",\n  measurementId: \"G-N0KDPJ32J3\",\n};\n\nfirebase.initializeApp(config);\nexport const db = firebase.database;\nexport const storage = firebase.storage;\n","export const colors = {\n  blue1: \"#1a73e8\",\n  gray1: \"#476282\",\n  bordergray: \"#F2F2F2\",\n};\n","import { css } from \"emotion\";\nimport produce from \"immer\";\nimport { remove, sortBy } from \"lodash-es\";\nimport React, { FunctionComponent, useEffect, useMemo, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { FaFileAlt } from \"react-icons/fa\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { storage } from \"../services/firebase\";\nimport { colors } from \"../style-variables\";\n\ninterface Props {\n  instanceId: string;\n}\n\nexport const FileShare: FunctionComponent<Props> = ({ instanceId }) => {\n  const [downloadUrls, setDownloadUrls] = useState<\n    Array<{ name: string; url: string }>\n  >([]);\n\n  const storageRef = useMemo(() => storage().ref().child(instanceId), [\n    instanceId,\n  ]);\n\n  useEffect(() => {\n    storageRef.listAll().then((res) => {\n      setDownloadUrls([]);\n      res.items.forEach(function (itemRef) {\n        itemRef.getDownloadURL().then((url) => {\n          setDownloadUrls((prevDownloads) => {\n            return [...prevDownloads, { url: url, name: itemRef.name }];\n          });\n        });\n      });\n    });\n  }, [storageRef]);\n\n  const handleUploadFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let fileName = \"untitled\";\n    if (e.target.files !== null) {\n      fileName = e.target.files[0].name;\n      storageRef\n        .child(fileName)\n        .put(e.target.files![0])\n        .then(() => {\n          console.log(\"upload done\");\n        })\n        .then(() => {\n          return storageRef.child(fileName).getDownloadURL();\n        })\n        .then((url) => {\n          setDownloadUrls((prevDownloads) => {\n            return [...prevDownloads, { url: url, name: fileName }];\n          });\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n    e.target.files = null;\n    e.target.value = \"\";\n  };\n\n  const handleDeleteFile = (name: string) => {\n    const ref = storageRef.child(name);\n    ref\n      .delete()\n      .then(() => {\n        setDownloadUrls((prevFiles) =>\n          produce(prevFiles, (newFiles) => {\n            remove(newFiles, (file) => file.name === name);\n            return newFiles;\n          })\n        );\n      })\n      .catch(() => {});\n  };\n\n  return (\n    <>\n      <h5 className={heading}>Files</h5>\n      <section className={fileContainer}>\n        {sortBy(downloadUrls, [\"name\"]).map((file, index) => {\n          return (\n            <div key={file.url} className={fileRow}>\n              <div>\n                <FaFileAlt className={fileIcon} />\n                <a download={file.name} href={file.url}>\n                  {file.name}\n                </a>\n              </div>\n              <div style={{ marginRight: 10 }}>\n                <TiDelete\n                  className={deleteIcon}\n                  onClick={() => handleDeleteFile(file.name)}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </section>\n      <section>\n        <label htmlFor=\"file-upload\" className={fileInputLabel}>\n          <Form.Control\n            id=\"file-upload\"\n            type=\"file\"\n            onChange={handleUploadFile}\n            className={fileInput}\n          />\n          Click or drag files here to upload.\n        </label>\n      </section>\n    </>\n  );\n};\n\nconst fileContainer = css``;\n\nconst fileInput = css`\n  border: 1px solid black;\n  position: absolute;\n  width: auto;\n  height: 200px;\n  opacity: 0;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst fileInputLabel = css`\n  border: 1px dashed ${colors.gray1};\n  border-radius: 2px;\n  height: 200px;\n  width: 100%;\n  background-color: ${colors.bordergray};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst heading = css`\n  font-weight: bold;\n  margin-bottom: 10px;\n  margin-top: 5px;\n`;\n\nconst fileRow = css`\n  display: flex;\n  align-items: center;\n  padding: 1rem 0px;\n  justify-content: space-between;\n  border-bottom: 2px solid ${colors.bordergray};\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst fileIcon = css`\n  margin-right: 10px;\n  color: ${colors.blue1};\n  font-size: 20px;\n`;\n\nconst deleteIcon = css`\n  font-size: 1.5rem;\n  color: salmon;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import { css, cx } from \"emotion\";\nimport produce from \"immer\";\nimport { debounce } from \"lodash-es\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { db } from \"../services/firebase\";\nimport { colors } from \"../style-variables\";\n\ninterface Props {\n  instanceId: string;\n}\n\nexport const TextShare: FunctionComponent<Props> = ({ instanceId }) => {\n  const [textVals, setTextVals] = useState<Array<string>>([]);\n  const [visibleTextArea, setVisibleTextArea] = useState<0 | 1 | 2>(0);\n  const [dbTextRef, setDbTextRef] = useState<firebase.database.Reference>();\n\n  const loadDb = useCallback(() => {\n    const dbTextRef = db().ref(instanceId).child(\"text\");\n    setDbTextRef(dbTextRef);\n\n    dbTextRef!.once(\"value\").then((snapshot) => {\n      if (snapshot.val() === null) {\n        db()\n          .ref(instanceId)\n          .set({ text: { 0: \"\", 1: \"\", 2: \"\" } });\n        setTextVals([\"\", \"\", \"\"]);\n      } else {\n        setTextVals(snapshot.val());\n      }\n    });\n  }, [instanceId]);\n\n  useEffect(loadDb, []);\n\n  const debounceUpdateDb = useCallback(\n    debounce((nextVals: Array<string>) => {\n      dbTextRef!.set({ 0: nextVals[0], 1: nextVals[1], 2: nextVals[2] });\n    }, 500),\n    [dbTextRef]\n  );\n\n  const handleTextChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>, index: number) => {\n      const inputVal = e.target.value;\n\n      const newVals = produce(textVals, (nextVals) => {\n        nextVals[index] = inputVal;\n        return nextVals;\n      });\n\n      setTextVals(newVals);\n\n      debounceUpdateDb(newVals);\n    },\n    [debounceUpdateDb, textVals]\n  );\n\n  return (\n    <>\n      <div className={btnContainer}>\n        <button\n          className={cx(tabBtn, { [tabBtnSelected]: visibleTextArea === 0 })}\n          onClick={() => setVisibleTextArea(0)}\n        >\n          Text Note 1\n        </button>\n        <button\n          className={cx(tabBtn, { [tabBtnSelected]: visibleTextArea === 1 })}\n          onClick={() => setVisibleTextArea(1)}\n        >\n          Text Note 2\n        </button>\n        <button\n          className={cx(tabBtn, { [tabBtnSelected]: visibleTextArea === 2 })}\n          onClick={() => setVisibleTextArea(2)}\n        >\n          Code Note\n        </button>\n      </div>\n      {textVals.map((textVal, index) => {\n        return (\n          <textarea\n            key={index}\n            aria-label=\"text-share\"\n            className={textArea}\n            value={textVal}\n            onChange={(e) => handleTextChange(e, index)}\n            style={{\n              display: `${index === visibleTextArea ? \"block\" : \"none\"}`,\n            }}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst tabBtn = css`\n  border-radius: 0px;\n  margin-right: 1rem;\n  background-color: transparent;\n  color: ${colors.gray1};\n  font-weight: bold;\n  border: none;\n  &:last-child {\n    margin-right: none;\n  }\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst tabBtnSelected = css`\n  color: ${colors.blue1};\n  padding: 5px;\n  border-bottom: 2px solid ${colors.blue1};\n`;\n\nconst btnContainer = css`\n  display: flex;\n  margin-bottom: 1rem;\n`;\n\nconst textArea = css`\n  border: 2px solid ${colors.bordergray};\n  width: 100%;\n  min-height: 300px;\n  padding: 1rem;\n  margin-top: 4px;\n  &:focus {\n    outline: 2px solid ${colors.blue1};\n  }\n  &:nth-child(2) {\n  }\n  &:last-child {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n`;\n","import { css } from \"emotion\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { db } from \"../services/firebase\";\nimport { FileShare } from \"./FileShare\";\nimport { TextShare } from \"./TextShare\";\n\nexport const CloudInstance = () => {\n  const { id } = useParams<{ id: string }>();\n  const history = useHistory();\n  const removeInstance = () => {\n    db().ref(id).remove();\n    history.goBack();\n  };\n  return (\n    <>\n      <header className={headerContainer}>\n        <h1>File Cloud</h1>\n        <h2>ID: {id}</h2>\n        <Button onClick={removeInstance} variant=\"danger\">\n          Delete Instance\n        </Button>\n      </header>\n      <div className={flexContainer}>\n        <div className={contentContainer}>\n          <section>\n            <TextShare instanceId={id} />\n          </section>\n          <section>\n            <FileShare instanceId={id} />\n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst headerContainer = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2rem 0;\n`;\n\nconst flexContainer = css`\n  display: flex;\n  justify-content: center;\n  @media (max-width: 500px) {\n    flex-direction: column;\n  } ;\n`;\n\nconst contentContainer = css`\n  padding: 1rem;\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 4rem;\n  max-width: 1000px;\n`;\n","import { css, cx } from \"emotion\";\nimport React, { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"../services/firebase\";\nimport { generateId } from \"../utils/generateId\";\n\nexport const Home = () => {\n  const history = useHistory();\n  const [uniqId, setUniqId] = useState(\"\");\n  const [btnDisabled, setBtnDisabled] = useState(true);\n  const [showErrAlert, setShowErrAlert] = useState(false);\n\n  const handleCreateInstance = () => {\n    const id = generateId(6);\n    history.push(`/${id}`);\n  };\n\n  const handleIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUniqId(e.target.value);\n    if (e.target.value.length === 6) {\n      setBtnDisabled(false);\n    } else {\n      setBtnDisabled(true);\n    }\n  };\n\n  const handleSearchBtn = () => {\n    setShowErrAlert(false);\n    db()\n      .ref(uniqId)\n      .once(\"value\")\n      .then((snapshot) => {\n        if (snapshot.val() !== null) {\n          history.push(`/${uniqId}`);\n        } else {\n          setShowErrAlert(true);\n        }\n      })\n      .catch((err) => setShowErrAlert(true));\n  };\n\n  return (\n    <div className={container}>\n      <h1>File Cloud</h1>\n      <Button size=\"lg\" className={createBtn} onClick={handleCreateInstance}>\n        Create new instance\n      </Button>\n      <div className={inputWrapper}>\n        <Form.Control\n          type=\"text\"\n          size=\"lg\"\n          value={uniqId}\n          placeholder=\"Unique ID\"\n          onChange={handleIdChange}\n          className={idInput}\n          maxLength={6}\n        />\n        <Button\n          size=\"lg\"\n          onClick={handleSearchBtn}\n          className={searchBtn}\n          disabled={btnDisabled}\n        >\n          Load\n        </Button>\n      </div>\n      <Alert\n        className={cx(\n          { [errorAlertShow]: showErrAlert },\n          { [errorAlertHide]: !showErrAlert }\n        )}\n        variant=\"danger\"\n      >\n        This ID is not valid.\n      </Alert>\n    </div>\n  );\n};\n\nconst createBtn = css`\n  width: 100%;\n  max-width: 300px;\n  margin: 1rem 0;\n`;\n\nconst container = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nconst inputWrapper = css`\n  width: 100%;\n  max-width: 300px;\n  margin: 1rem 0;\n  display: flex;\n`;\n\nconst idInput = css`\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0ex;\n`;\n\nconst searchBtn = css`\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n  &:disabled:hover {\n    cursor: not-allowed;\n  }\n`;\n\nconst errorAlertShow = css``;\n\nconst errorAlertHide = css`\n  opacity: 0;\n  cursor: none;\n`;\n","export const generateId = (length: number) => {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { CloudInstance } from \"./components/CloudInstance\";\nimport { Home } from \"./components/Home\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/:id\">\n          <CloudInstance />\n        </Route>\n        <Route>\n          <Home />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}